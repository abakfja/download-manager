        -:    0:Source:/home/vagrant/dev/download manager/main.c
        -:    0:Graph:/home/vagrant/dev/download manager/cmake-build-debug-coverage/CMakeFiles/download_manager.dir/main.c.gcno
        -:    0:Data:/home/vagrant/dev/download manager/cmake-build-debug-coverage/CMakeFiles/download_manager.dir/main.c.gcda
        -:    0:Runs:1
        -:    1:#include <errno.h>
        -:    2:#include <poll.h>
        -:    3:#include <stdio.h>
        -:    4:#include <stdlib.h>
        -:    5:#include <sys/inotify.h>
        -:    6:#include <unistd.h>
        -:    7:#include <string.h>
        -:    8:
        -:    9:/* Read all available inotify events from the file descriptor 'fd'.
        -:   10:	 wd is the table of watch descriptors for the directories in argv.
        -:   11:	 argc is the length of wd and argv.
        -:   12:	 argv is the list of watched directories.
        -:   13:	 Entry 0 of wd and argv is unused. */
        -:   14:
    #####:   15:static void handle_events(int fd, const int *wd, int argc, char *argv[]) {
        -:   16:	/* Some systems cannot read integer variables if they are not
        -:   17:		 properly aligned. On other systems, incorrect alignment may
        -:   18:		 decrease performance. Hence, the buffer used for reading from
        -:   19:		 the inotify file descriptor should have the same alignment as
        -:   20:		 struct inotify_event. */
        -:   21:
        -:   22:	char buf[4096]
        -:   23:		__attribute__ ((aligned(__alignof__(struct inotify_event))));
        -:   24:	const struct inotify_event *event;
        -:   25:	int i;
        -:   26:	ssize_t len;
        -:   27:	char *ptr;
        -:   28:
        -:   29:	/* Loop while events can be read from inotify file descriptor. */
        -:   30:
        -:   31:	for (;;) {
        -:   32:
        -:   33:		/* Read some events. */
        -:   34:
    #####:   35:		len = read(fd, buf, sizeof buf);
    %%%%%:   35-block  0
    %%%%%:   35-block  1
    #####:   36:		if (len == -1 && errno != EAGAIN) {
    %%%%%:   36-block  0
    #####:   37:			perror("read");
    %%%%%:   37-block  0
    #####:   38:			exit(EXIT_FAILURE);
        -:   39:		}
        -:   40:
        -:   41:		/* If the nonblocking read() found no events to read, then
        -:   42:			 it returns -1 with errno set to EAGAIN. In that case,
        -:   43:			 we exit the loop. */
        -:   44:
    #####:   45:		if (len <= 0)
    %%%%%:   45-block  0
    #####:   46:			break;
    %%%%%:   46-block  0
        -:   47:
        -:   48:		/* Loop over all events in the buffer */
        -:   49:
    #####:   50:		for (ptr = buf; ptr < buf + len;
    %%%%%:   50-block  0
    %%%%%:   50-block  1
    #####:   51:		     ptr += sizeof(struct inotify_event) + event->len) {
    %%%%%:   51-block  0
        -:   52:
    #####:   53:			event = (const struct inotify_event *) ptr;
        -:   54:
        -:   55:			/* Print event type */
        -:   56:
    #####:   57:			if (event->mask & IN_OPEN)
    %%%%%:   57-block  0
    #####:   58:				printf("IN_OPEN: ");
    %%%%%:   58-block  0
    #####:   59:			if (event->mask & IN_CLOSE_NOWRITE)
    %%%%%:   59-block  0
    #####:   60:				printf("IN_CLOSE_NOWRITE: ");
    %%%%%:   60-block  0
    #####:   61:			if (event->mask & IN_CLOSE_WRITE)
    %%%%%:   61-block  0
    #####:   62:				printf("IN_CLOSE_WRITE: ");
    %%%%%:   62-block  0
        -:   63:
        -:   64:			/* Print the name of the watched directory */
        -:   65:
    #####:   66:			for (i = 1; i < argc; ++i) {
    %%%%%:   66-block  0
    %%%%%:   66-block  1
    %%%%%:   66-block  2
    #####:   67:				if (wd[i] == event->wd) {
    %%%%%:   67-block  0
    #####:   68:					printf("%s/", argv[i]);
    %%%%%:   68-block  0
    #####:   69:					break;
        -:   70:				}
        -:   71:			}
        -:   72:
        -:   73:			/* Print the name of the file */
        -:   74:
    #####:   75:			if (event->len)
    %%%%%:   75-block  0
    #####:   76:				printf("%s", event->name);
    %%%%%:   76-block  0
        -:   77:
        -:   78:			/* Print type of filesystem object */
        -:   79:
    #####:   80:			if (event->mask & IN_ISDIR)
    %%%%%:   80-block  0
    #####:   81:				printf(" [directory]\n");
    %%%%%:   81-block  0
        -:   82:			else
    #####:   83:				printf(" [file]\n");
    %%%%%:   83-block  0
        -:   84:		}
        -:   85:	}
    #####:   86:}
        -:   87:
        1:   88:int main(int argc, char *argv[]) {
        -:   89:	char buf;
        -:   90:	int fd, i, poll_num;
        -:   91:	int *wd;
        -:   92:	nfds_t nfds;
        -:   93:	struct pollfd fds[2];
        -:   94:
        1:   95:	if (argc < 2) {
        1:   95-block  0
        1:   96:		printf("Usage: %s PATH [PATH ...]\n", argv[0]);
        1:   96-block  0
        1:   97:		exit(EXIT_FAILURE);
        -:   98:	}
        -:   99:
    #####:  100:	printf("Press ENTER key to terminate.\n");
    %%%%%:  100-block  0
        -:  101:
        -:  102:	/* Create the file descriptor for accessing the inotify API */
        -:  103:
    #####:  104:	fd = inotify_init1(IN_NONBLOCK);
    #####:  105:	if (fd == -1) {
    #####:  106:		perror("inotify_init1");
    %%%%%:  106-block  0
    #####:  107:		exit(EXIT_FAILURE);
        -:  108:	}
        -:  109:
        -:  110:	/* Allocate memory for watch descriptors */
        -:  111:
    #####:  112:	wd = calloc(argc, sizeof(int));
    #####:  113:	if (wd == NULL) {
    %%%%%:  113-block  0
    #####:  114:		perror("calloc");
    %%%%%:  114-block  0
    #####:  115:		exit(EXIT_FAILURE);
        -:  116:	}
        -:  117:
        -:  118:	/* Mark directories for events
        -:  119:		 - file was opened
        -:  120:		 - file was closed */
        -:  121:
    #####:  122:	for (i = 1; i < argc; i++) {
    %%%%%:  122-block  0
    %%%%%:  122-block  1
    %%%%%:  122-block  2
    #####:  123:		wd[i] = inotify_add_watch(fd, argv[i],
    %%%%%:  123-block  0
        -:  124:		                          IN_OPEN | IN_CLOSE);
    #####:  125:		if (wd[i] == -1) {
    #####:  126:			fprintf(stderr, "Cannot watch '%s': %s\n",
    #####:  127:			        argv[i], strerror(errno));
    %%%%%:  127-block  0
    #####:  128:			exit(EXIT_FAILURE);
        -:  129:		}
        -:  130:	}
        -:  131:
        -:  132:	/* Prepare for polling */
        -:  133:
    #####:  134:	nfds = 2;
        -:  135:
        -:  136:	/* Console input */
        -:  137:
    #####:  138:	fds[0].fd = STDIN_FILENO;
    #####:  139:	fds[0].events = POLLIN;
        -:  140:
        -:  141:	/* Inotify input */
        -:  142:
    #####:  143:	fds[1].fd = fd;
    #####:  144:	fds[1].events = POLLIN;
        -:  145:
        -:  146:	/* Wait for events and/or terminal input */
        -:  147:
    #####:  148:	printf("Listening for events.\n");
    %%%%%:  148-block  0
        -:  149:	while (1) {
    #####:  150:		poll_num = poll(fds, nfds, -1);
    %%%%%:  150-block  0
    %%%%%:  150-block  1
    #####:  151:		if (poll_num == -1) {
    #####:  152:			if (errno == EINTR)
    %%%%%:  152-block  0
    #####:  153:				continue;
    %%%%%:  153-block  0
    #####:  154:			perror("poll");
    %%%%%:  154-block  0
    #####:  155:			exit(EXIT_FAILURE);
        -:  156:		}
        -:  157:
    #####:  158:		if (poll_num > 0) {
    %%%%%:  158-block  0
        -:  159:
    #####:  160:			if (fds[0].revents & POLLIN) {
    %%%%%:  160-block  0
        -:  161:
        -:  162:				/* Console input is available. Empty stdin and quit */
        -:  163:
    #####:  164:				while (read(STDIN_FILENO, &buf, 1) > 0 && buf != '\n')
    %%%%%:  164-block  0
    %%%%%:  164-block  1
    %%%%%:  164-block  2
    #####:  165:					continue;
    %%%%%:  165-block  0
    #####:  166:				break;
    %%%%%:  166-block  0
        -:  167:			}
        -:  168:
    #####:  169:			if (fds[1].revents & POLLIN) {
    %%%%%:  169-block  0
        -:  170:
        -:  171:				/* Inotify events are available */
        -:  172:
    #####:  173:				handle_events(fd, wd, argc, argv);
    %%%%%:  173-block  0
        -:  174:			}
        -:  175:		}
        -:  176:	}
        -:  177:
    #####:  178:	printf("Listening for events stopped.\n");
    %%%%%:  178-block  0
        -:  179:
        -:  180:	/* Close inotify file descriptor */
        -:  181:
    #####:  182:	close(fd);
        -:  183:
    #####:  184:	free(wd);
    #####:  185:	exit(EXIT_SUCCESS);
        -:  186:}
        -:  187:
